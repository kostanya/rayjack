name: CMake on multiple platforms

on:
  push:
    branches: 
     - 'main' 
     - 'feature/**'
     - 'test'
  pull_request:
    types: [opened, synchronize, reopened] 
    branches: [ "main" ]
    
jobs:  
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Debug, Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: windows-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: windows-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: cl
            
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT" 

    - name: Initialize and update submodules
      run: |
        git submodule init
        git submodule update --recursive

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        cmake -B ${{ steps.strings.outputs.build-output-dir }} 
        -DGLM_INCLUDE_DIR="${{ github.workspace }}/external/glm"
        -DGLM_INCLUDE_DIR="${{ github.workspace }}/external/Catch2"
        -DCMAKE_C_STANDARD=11
        -DCMAKE_CXX_STANDARD=17
        -DCMAKE_CXX_COMPILER=${{ matrix.c_compiler == cl ? cl : matrix.c_compiler + '++' }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}
