name: CMake on multiple platforms

on:
  push:
    branches: 
     - 'main' 
     - 'feature/**'
     - 'test'
  pull_request:
    types: [opened, synchronize, reopened] 
    branches: [ "main" ]
    
jobs:  
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Debug]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: windows-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: windows-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: cl
            
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT" 

    - name: Initialize and update submodules
      run: |
        git submodule init
        git submodule update --recursive

    - name: Check Ubuntu system information
      if: matrix.os == 'ubuntu-latest'
      run: |
        # Print system information
        lsb_release -a
        uname -a
        # Check existing installed packages
        dpkg -l    
    
    - name: Install Qt for Ubuntu
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update -qq
        sudo apt-get install '^libxcb-*' libx11-xcb-dev libglu1-mesa-dev libxrender-dev libxi-dev libxkbcommon-x11-0
        wget https://download.qt.io/official_releases/online_installers/qt-unified-linux-x64-online.run
        chmod +x qt-unified-linux-x64-online.run
        ./qt-unified-linux-x64-online.run --platform minimal

    - name: Install Qt (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install qt

    - name: Check Windows system information
      if: matrix.os == 'windows-latest'
      run: |
        # Print system information
        $PSVersionTable.PSVersion
        systeminfo
      shell: powershell

    - name: Install Qt (Windows)
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: |
        # Download Qt installer using PowerShell
        $webClient = New-Object System.Net.WebClient
        $url = 'https://download.qt.io/official_releases/online_installers/qt-unified-windows-x64-online.exe'
        $outputFile = 'qt-installer.exe'
        # Check permissions of installation files or directories
        Get-Acl -Path https://download.qt.io/official_releases/online_installers/qt-unified-windows-x64-online.exe
        # Check execution policies
        Get-ExecutionPolicy
        $webClient.DownloadFile($url, $outputFile)
        # Run Qt installer
        Start-Process -FilePath .\qt-installer.exe -Wait
        # Remove Qt installer after installation
        Remove-Item -Path .\qt-installer.exe
      
        # Download Qt installer (adjust the URL to the desired Qt version)
        #Invoke-WebRequest -Uri 'https://download.qt.io/official_releases/online_installers/qt-unified-windows-x64-online.exe' -OutFile qt-installer.exe
        # Install Qt silently (adjust installer flags as needed)
        #Start-Process -FilePath ./qt-installer.exe -Wait 
        #Remove-Item -FilePath ./qt-installer.exe

    - name: Configure CMake for Ubuntu and Gcc (with code coverage flags)
      if: matrix.os == 'ubuntu-latest' && matrix.c_compiler == 'gcc'
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }} 
        -DGLM_INCLUDE_DIR="${{ github.workspace }}/external/glm"
        -DGLM_INCLUDE_DIR="${{ github.workspace }}/external/Catch2"
        -DCMAKE_C_STANDARD=11
        -DCMAKE_CXX_STANDARD=17
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        #-DCMAKE_PREFIX_PATH= "${{ github.workspace }}"       # Qt installation path
        -DCMAKE_CXX_FLAGS="-fprofile-arcs -ftest-coverage" ..
        -S ${{ github.workspace }}

    - name: Configure CMake for Ubuntu without gcc
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      if: matrix.os == 'ubuntu-latest' && matrix.c_compiler != 'gcc'
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }} 
        -DGLM_INCLUDE_DIR="${{ github.workspace }}/external/glm"
        -DGLM_INCLUDE_DIR="${{ github.workspace }}/external/Catch2"
        -DCMAKE_C_STANDARD=11
        -DCMAKE_CXX_STANDARD=17
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        #-DCMAKE_PREFIX_PATH= "${{ github.workspace }}"       # Qt installation path 
        -S ${{ github.workspace }}
        
    - name: Configure CMake for macOS
      if: matrix.os == 'macos-latest'
      run: >
        # Run CMake with Qt installation path
        cmake -B ${{ github.workspace }}/build #${{ steps.strings.outputs.build-output-dir }} 
        -DGLM_INCLUDE_DIR="${{ github.workspace }}/external/glm"
        -DGLM_INCLUDE_DIR="${{ github.workspace }}/external/Catch2"
        -DCMAKE_C_STANDARD=11
        -DCMAKE_CXX_STANDARD=17
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        #-DCMAKE_PREFIX_PATH= ${{ github.workspace }}
        -S ${{ github.workspace }}

    - name: Get QTDIR for Windows
      if: matrix.os == 'windows-latest'
      run: echo "QTDIR=$QTDIR" >> $GITHUB_ENV
      shell: bash

    - name: Configure CMake for Windows
      if: matrix.os == 'windows-latest'
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }} 
        -DGLM_INCLUDE_DIR="${{ github.workspace }}/external/glm"
        -DGLM_INCLUDE_DIR="${{ github.workspace }}/external/Catch2"
        -DCMAKE_C_STANDARD=11
        -DCMAKE_CXX_STANDARD=17
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_PREFIX_PATH= "C:\Qt\6.6.1\mingw_64"  
        -S ${{ github.workspace }}
        
    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ github.workspace }}/build --config ${{ matrix.build_type }} #${{ steps.strings.outputs.build-output-dir }}

    - name: Test
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Install lcov (for code coverage)
      if: matrix.os == 'ubuntu-latest' && matrix.c_compiler == 'gcc'
      run: |                                
          sudo apt-get update
          sudo apt-get install -y lcov
        
    - name: Install LLVM tools (for Ubuntu and gcc)
      if: matrix.os == 'ubuntu-latest' && matrix.c_compiler == 'gcc'
      run: |
        sudo apt-get update
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|sudo apt-key add -
        sudo apt-add-repository "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-14 main"
        sudo apt-get update
        sudo apt-get install -y llvm llvm-dev

    - name: Collect Code Coverage (for Ubuntu and gcc)
      if: matrix.os == 'ubuntu-latest' && matrix.c_compiler == 'gcc'
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: |
        ctest -j $(nproc) --build-config ${{ matrix.build_type }}
        lcov --capture --directory "${{ github.workspace }}/build/CMakeFiles" --output-file coverage.info
        lcov --remove coverage.info '/usr/*' --output-file coverage.info
        lcov --list coverage.info
        # Uses lcov to collect coverage data and create a coverage.info file.
        # Removes system-related paths from the coverage report using lcov.
        # Displays the coverage information.
